package com.example.backendlaptop.service.banhang;

import com.example.backendlaptop.dto.banhang.HoaDonResponse;
import com.example.backendlaptop.dto.banhang.ThemSanPhamRequest;
import com.example.backendlaptop.entity.ChiTietSanPham;
import com.example.backendlaptop.entity.HoaDon;
import com.example.backendlaptop.entity.HoaDonChiTiet;
import com.example.backendlaptop.expection.ApiException;
import com.example.backendlaptop.model.TrangThaiHoaDon;
import com.example.backendlaptop.repository.ChiTietSanPhamRepository;
import com.example.backendlaptop.repository.banhang.HoaDonChiTietRepository;
import jakarta.transaction.Transactional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Optional;
import java.util.UUID;

/**
 * Service qu·∫£n l√Ω s·∫£n ph·∫©m trong h√≥a ƒë∆°n
 * Nhi·ªám v·ª•: Th√™m, x√≥a, c·∫≠p nh·∫≠t s·∫£n ph·∫©m trong h√≥a ƒë∆°n
 * Bao g·ªìm logic t·∫°m gi·ªØ v√† ho√†n tr·∫£ t·ªìn kho
 */
@Service
public class SanPhamTrongHoaDonService {

    @Autowired
    private HoaDonChiTietRepository hoaDonChiTietRepository;

    @Autowired
    private ChiTietSanPhamRepository chiTietSanPhamRepository;

    @Autowired
    private BanHangHoaDonService hoaDonService;

    /**
     * Th√™m s·∫£n ph·∫©m v√†o h√≥a ƒë∆°n ch·ªù
     * Bao g·ªìm:
     * - Ki·ªÉm tra t·ªìn kho
     * - T·∫°m gi·ªØ t·ªìn kho
     * - Th√™m/c·∫≠p nh·∫≠t chi ti·∫øt h√≥a ƒë∆°n
     * - T√≠nh l·∫°i t·ªïng ti·ªÅn
     */
    @Transactional
    public HoaDonResponse themSanPhamVaoHoaDon(UUID idHoaDon, ThemSanPhamRequest request) {
        System.out.println("üîç [SanPhamTrongHoaDonService] Th√™m s·∫£n ph·∫©m v√†o h√≥a ƒë∆°n:");
        System.out.println("  - ID H√≥a ƒë∆°n: " + idHoaDon);
        System.out.println("  - ID Chi ti·∫øt s·∫£n ph·∫©m: " + request.getChiTietSanPhamId());
        System.out.println("  - S·ªë l∆∞·ª£ng: " + request.getSoLuong());
        
        // 1. T√¨m h√≥a ƒë∆°n
        HoaDon hoaDon = hoaDonService.findById(idHoaDon);

        // 2. Ki·ªÉm tra tr·∫°ng th√°i h√≥a ƒë∆°n
        if (hoaDon.getTrangThai() != TrangThaiHoaDon.CHO_THANH_TOAN) {
            System.err.println("‚ùå [SanPhamTrongHoaDonService] H√≥a ƒë∆°n kh√¥ng ·ªü tr·∫°ng th√°i ch·ªù thanh to√°n");
            throw new ApiException("Ch·ªâ c√≥ th·ªÉ th√™m s·∫£n ph·∫©m v√†o h√≥a ƒë∆°n ƒëang ch·ªù thanh to√°n", "BAD_REQUEST");
        }

        // 3. T√¨m chi ti·∫øt s·∫£n ph·∫©m
        UUID chiTietSanPhamId = request.getChiTietSanPhamId();
        System.out.println("üîç [SanPhamTrongHoaDonService] T√¨m ki·∫øm chi ti·∫øt s·∫£n ph·∫©m v·ªõi ID: " + chiTietSanPhamId);
        
        ChiTietSanPham ctsp = chiTietSanPhamRepository.findById(chiTietSanPhamId)
                .orElseThrow(() -> {
                    System.err.println("‚ùå [SanPhamTrongHoaDonService] Kh√¥ng t√¨m th·∫•y chi ti·∫øt s·∫£n ph·∫©m v·ªõi ID: " + chiTietSanPhamId);
                    return new ApiException("Kh√¥ng t√¨m th·∫•y chi ti·∫øt s·∫£n ph·∫©m v·ªõi ID: " + chiTietSanPhamId, "NOT_FOUND");
                });
        
        System.out.println("‚úÖ [SanPhamTrongHoaDonService] T√¨m th·∫•y chi ti·∫øt s·∫£n ph·∫©m: " + ctsp.getMaCtsp());
        System.out.println("  - Gi√° b√°n: " + ctsp.getGiaBan());
        System.out.println("  - S·ªë l∆∞·ª£ng t·ªìn: " + ctsp.getSoLuongTon());
        System.out.println("  - S·ªë l∆∞·ª£ng t·∫°m gi·ªØ: " + ctsp.getSoLuongTamGiu());

        // 4. Ki·ªÉm tra gi√° b√°n
        if (ctsp.getGiaBan() == null) {
            System.err.println("‚ùå [SanPhamTrongHoaDonService] S·∫£n ph·∫©m kh√¥ng c√≥ gi√° b√°n!");
            throw new ApiException("S·∫£n ph·∫©m " + ctsp.getMaCtsp() + " ch∆∞a c√≥ gi√° b√°n. Vui l√≤ng c·∫≠p nh·∫≠t gi√° b√°n tr∆∞·ªõc khi th√™m v√†o h√≥a ƒë∆°n.", "MISSING_PRICE");
        }

        // 5. Ki·ªÉm tra t·ªìn kho
        int soLuongTon = ctsp.getSoLuongTon() != null ? ctsp.getSoLuongTon() : 0;
        int soLuongTamGiu = ctsp.getSoLuongTamGiu() != null ? ctsp.getSoLuongTamGiu() : 0;
        int soLuongKhaDung = soLuongTon - soLuongTamGiu;

        System.out.println("  - S·ªë l∆∞·ª£ng kh·∫£ d·ª•ng: " + soLuongKhaDung);
        System.out.println("  - S·ªë l∆∞·ª£ng y√™u c·∫ßu: " + request.getSoLuong());

        if (request.getSoLuong() > soLuongKhaDung) {
            System.err.println("‚ùå [SanPhamTrongHoaDonService] Kh√¥ng ƒë·ªß h√†ng!");
            throw new ApiException("Kh√¥ng ƒë·ªß h√†ng. S·ªë l∆∞·ª£ng kh·∫£ d·ª•ng: " + soLuongKhaDung, "INSUFFICIENT_STOCK");
        }

        // 6. T·∫°m gi·ªØ t·ªìn kho
        ctsp.setSoLuongTamGiu(soLuongTamGiu + request.getSoLuong());
        ensureVersionNotNull(ctsp);
        chiTietSanPhamRepository.save(ctsp);
        System.out.println("‚úÖ [SanPhamTrongHoaDonService] ƒê√£ t·∫°m gi·ªØ " + request.getSoLuong() + " s·∫£n ph·∫©m");

        // 7. Ki·ªÉm tra s·∫£n ph·∫©m ƒë√£ c√≥ trong h√≥a ƒë∆°n ch∆∞a
        Optional<HoaDonChiTiet> existingHdct = hoaDon.getHoaDonChiTiets().stream()
                .filter(hdct -> hdct.getChiTietSanPham().getId().equals(ctsp.getId()))
                .findFirst();

        if (existingHdct.isPresent()) {
            // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng
            System.out.println("‚úÖ [SanPhamTrongHoaDonService] S·∫£n ph·∫©m ƒë√£ c√≥ trong h√≥a ƒë∆°n, c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng");
            HoaDonChiTiet hdct = existingHdct.get();
            hdct.setSoLuong(hdct.getSoLuong() + request.getSoLuong());
            hoaDonChiTietRepository.save(hdct);
        } else {
            // T·∫°o m·ªõi
            System.out.println("‚úÖ [SanPhamTrongHoaDonService] T·∫°o m·ªõi chi ti·∫øt h√≥a ƒë∆°n");
            HoaDonChiTiet hdct = new HoaDonChiTiet();
            hdct.setHoaDon(hoaDon);
            hdct.setChiTietSanPham(ctsp);
            hdct.setSoLuong(request.getSoLuong());
            hdct.setDonGia(ctsp.getGiaBan());
            hoaDon.getHoaDonChiTiets().add(hdct);
            hoaDonChiTietRepository.save(hdct);
        }

        // 8. T√≠nh l·∫°i t·ªïng ti·ªÅn
        hoaDonService.capNhatTongTien(hoaDon);
        System.out.println("‚úÖ [SanPhamTrongHoaDonService] Ho√†n t·∫•t th√™m s·∫£n ph·∫©m v√†o h√≥a ƒë∆°n!");
        
        return new HoaDonResponse(hoaDonService.findById(idHoaDon));
    }

    /**
     * X√≥a s·∫£n ph·∫©m kh·ªèi h√≥a ƒë∆°n ch·ªù
     * Bao g·ªìm:
     * - Ho√†n tr·∫£ t·ªìn kho t·∫°m gi·ªØ
     * - X√≥a chi ti·∫øt h√≥a ƒë∆°n
     * - T√≠nh l·∫°i t·ªïng ti·ªÅn
     */
    @Transactional
    public HoaDonResponse xoaSanPhamKhoiHoaDon(UUID idHoaDonChiTiet) {
        // 1. T√¨m h√≥a ƒë∆°n chi ti·∫øt
        HoaDonChiTiet hdct = hoaDonChiTietRepository.findById(idHoaDonChiTiet)
                .orElseThrow(() -> new ApiException("Kh√¥ng t√¨m th·∫•y chi ti·∫øt h√≥a ƒë∆°n v·ªõi ID: " + idHoaDonChiTiet, "NOT_FOUND"));

        // 2. L·∫•y th√¥ng tin
        HoaDon hoaDon = hdct.getHoaDon();
        ChiTietSanPham ctsp = hdct.getChiTietSanPham();
        int soLuong = hdct.getSoLuong();

        // 3. Ki·ªÉm tra tr·∫°ng th√°i h√≥a ƒë∆°n
        if (hoaDon.getTrangThai() != TrangThaiHoaDon.CHO_THANH_TOAN) {
            throw new ApiException("Ch·ªâ c√≥ th·ªÉ x√≥a s·∫£n ph·∫©m kh·ªèi h√≥a ƒë∆°n ƒëang ch·ªù thanh to√°n", "BAD_REQUEST");
        }

        // 4. Ho√†n tr·∫£ t·ªìn kho t·∫°m gi·ªØ
        int soLuongTamGiu = ctsp.getSoLuongTamGiu() != null ? ctsp.getSoLuongTamGiu() : 0;
        ctsp.setSoLuongTamGiu(Math.max(0, soLuongTamGiu - soLuong));
        ensureVersionNotNull(ctsp);
        chiTietSanPhamRepository.save(ctsp);

        // 5. X√≥a chi ti·∫øt h√≥a ƒë∆°n
        hoaDon.getHoaDonChiTiets().remove(hdct);
        hoaDonChiTietRepository.delete(hdct);

        // 6. T√≠nh l·∫°i t·ªïng ti·ªÅn
        hoaDonService.capNhatTongTien(hoaDon);

        return new HoaDonResponse(hoaDonService.findById(hoaDon.getId()));
    }

    /**
     * Gi·∫£i ph√≥ng t·ªìn kho t·∫°m gi·ªØ cho t·∫•t c·∫£ s·∫£n ph·∫©m trong h√≥a ƒë∆°n
     * ƒê∆∞·ª£c g·ªçi khi x√≥a h√≥a ƒë∆°n ch·ªù
     */
    @Transactional
    public void giaiPhongTonKhoTamGiu(HoaDon hoaDon) {
        if (hoaDon.getHoaDonChiTiets() != null && !hoaDon.getHoaDonChiTiets().isEmpty()) {
            for (HoaDonChiTiet hdct : hoaDon.getHoaDonChiTiets()) {
                ChiTietSanPham ctsp = hdct.getChiTietSanPham();
                int soLuongTamGiu = ctsp.getSoLuongTamGiu() != null ? ctsp.getSoLuongTamGiu() : 0;
                int soLuongGiaiPhong = hdct.getSoLuong();

                // Gi·∫£i ph√≥ng s·ªë l∆∞·ª£ng t·∫°m gi·ªØ
                ctsp.setSoLuongTamGiu(Math.max(0, soLuongTamGiu - soLuongGiaiPhong));
                ensureVersionNotNull(ctsp);
                chiTietSanPhamRepository.save(ctsp);
            }
        }
    }

    /**
     * Helper method: ƒê·∫£m b·∫£o version field c·ªßa ChiTietSanPham kh√¥ng null
     * Fix l·ªói NullPointerException khi Hibernate c·ªë g·∫Øng increment @Version field
     */
    private void ensureVersionNotNull(ChiTietSanPham ctsp) {
        if (ctsp.getVersion() == null) {
            ctsp.setVersion(0L);
            System.out.println("‚ö†Ô∏è [SanPhamTrongHoaDonService] Warning: ChiTietSanPham version was null, initialized to 0 for: " + ctsp.getMaCtsp());
        }
    }
}

